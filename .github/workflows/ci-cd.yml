name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '8'

jobs:
  # Quality Assurance Job
  qa:
    name: 🔍 Quality Assurance
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔍 Type checking
        run: npm run type-check || npx tsc --noEmit
        
      - name: 🧹 ESLint analysis
        run: npm run lint
        
      - name: 🏗️ Build verification
        run: npm run build
        
      - name: 📊 Bundle size analysis
        run: |
          echo "## Bundle Analysis 📊" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size | Gzip |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|------|" >> $GITHUB_STEP_SUMMARY
          find dist -name "*.js" -o -name "*.css" | head -5 | while read file; do
            size=$(du -h "$file" | cut -f1)
            gzip_size=$(gzip -c "$file" | wc -c | numfmt --to=iec)
            echo "| $(basename $file) | $size | $gzip_size |" >> $GITHUB_STEP_SUMMARY
          done
          
      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 1

  # Security Audit Job  
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🚀 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit
        
      - name: 🔒 Security audit
        run: |
          npm audit --audit-level=high
          echo "## Security Audit Results 🔒" >> $GITHUB_STEP_SUMMARY
          echo "✅ No high-severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY

  # Performance Testing Job
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    needs: qa
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        
      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist/
          
      - name: ⚡ Analyze bundle performance
        run: |
          echo "## Performance Metrics ⚡" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check main bundle size
          main_js=$(find dist/assets -name "index-*.js" | head -1)
          if [ -n "$main_js" ]; then
            size=$(stat -c%s "$main_js")
            size_mb=$(echo "scale=2; $size / 1048576" | bc)
            status="✅ Good"
            if (( $(echo "$size_mb > 1.0" | bc -l) )); then
              status="⚠️ Large"
            fi
            echo "| Bundle Size | ${size_mb}MB | $status |" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check CSS size
          main_css=$(find dist/assets -name "index-*.css" | head -1)
          if [ -n "$main_css" ]; then
            css_size=$(stat -c%s "$main_css")
            css_kb=$(echo "scale=1; $css_size / 1024" | bc)
            echo "| CSS Size | ${css_kb}KB | ✅ Good |" >> $GITHUB_STEP_SUMMARY
          fi

  # Deployment Job (Vercel)
  deploy:
    name: 🚀 Deploy to Vercel
    runs-on: ubuntu-latest
    needs: [qa, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🚀 Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          
      - name: 📝 Deployment summary
        run: |
          echo "## Deployment Status 🚀" >> $GITHUB_STEP_SUMMARY
          echo "✅ Successfully deployed to production" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Live URL:** [supplier-management-system.vercel.app](https://supplier-management-system.vercel.app)" >> $GITHUB_STEP_SUMMARY
          echo "📝 **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "👤 **Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  # Preview Deployment (for PRs)
  deploy-preview:
    name: 🔍 Deploy Preview
    runs-on: ubuntu-latest
    needs: [qa, security]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        
      - name: 🔍 Deploy Preview to Vercel
        uses: amondnet/vercel-action@v25
        id: vercel-preview
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: 💬 Preview comment
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔍 Preview Deployment
              
              ✅ Your changes have been deployed successfully!
              
              🔗 **Preview URL:** ${{ steps.vercel-preview.outputs.preview-url }}
              📝 **Commit:** ${{ github.sha }}
              
              The preview will be updated automatically with new commits.`
            })